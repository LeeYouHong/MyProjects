!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCOUNT_LEN	include/GlobleData.h	18;"	d
Accept	src/tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment
Accept	src/tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration
Accept	src/tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument
Accept	src/tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement
Accept	src/tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText
Accept	src/tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown
ActiveClient	src/ClientManager.cpp	/^CClient *CClientManager::ActiveClient()$/;"	f	class:CClientManager
ActiveSocketItem	src/SocketItemManager.cpp	/^CSocketItem *CSocketItemManager::ActiveSocketItem()$/;"	f	class:CSocketItemManager
Add	src/tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet
AddToEpoll	src/SocketItem.cpp	/^int CSocketItem::AddToEpoll(int fdEpoll, int flag)$/;"	f	class:CSocketItem
AddUser	src/XMLDataHandle.cpp	/^int CXMLDataHandle::AddUser(char* strAccount, char* strPasswd)$/;"	f	class:CXMLDataHandle
AllChat	src/HandleMessage.cpp	/^bool CHandleMessage::AllChat(void* pData, WORD wDataSize, int Socket)$/;"	f	class:CHandleMessage
Append	src/DataBaseThread.cpp	/^bool CDataBaseThread::Append(tagDBRequest* Request)$/;"	f	class:CDataBaseThread
Append	src/SendThread.cpp	/^bool CSendThread::Append(tagSendRequest* Request)$/;"	f	class:CSendThread
Attach	src/SocketItem.cpp	/^int CSocketItem::Attach(int socket)$/;"	f	class:CSocketItem
Attribute	src/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement
Attribute	src/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement
Attribute	src/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement
Attribute	src/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement
Attribute	src/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement
Attribute	src/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement
BYTE	include/GlobleData.h	/^typedef unsigned char       BYTE;$/;"	t
Blank	src/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText
CCHATROOM_H	include/ChatRoom.h	2;"	d
CCLIENTMANAGER_H	include/ClientManager.h	2;"	d
CCLIENT_H	include/Client.h	2;"	d
CChatRoom	include/ChatRoom.h	/^class CChatRoom$/;"	c
CChatRoom	src/ChatRoom.cpp	/^CChatRoom::CChatRoom()$/;"	f	class:CChatRoom
CClient	include/Client.h	/^class CClient$/;"	c
CClient	src/Client.cpp	/^CClient::CClient()$/;"	f	class:CClient
CClientManager	include/ClientManager.h	/^class CClientManager : public CSingleton<CClientManager>$/;"	c
CClientManager	src/ClientManager.cpp	/^CClientManager::CClientManager()$/;"	f	class:CClientManager
CCond	include/Locker.h	/^class CCond$/;"	c
CCond	src/Locker.cpp	/^CCond::CCond()$/;"	f	class:CCond
CDATA	include/tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText
CDATABASETHREAD_H	include/DataBaseThread.h	2;"	d
CDataBaseThread	include/DataBaseThread.h	/^class CDataBaseThread : public CServiceThread$/;"	c
CDataBaseThread	src/DataBaseThread.cpp	/^CDataBaseThread::CDataBaseThread(unsigned int MaxRequests)$/;"	f	class:CDataBaseThread
CDataEngine	include/DataEngine.h	/^class CDataEngine : public IDataEngineSink, public IPostDataBaseRequestSink$/;"	c
CDataEngine	src/DataEngine.cpp	/^CDataEngine::CDataEngine()$/;"	f	class:CDataEngine
CGLOBALPARAMMANAGER_H	include/GlobalParamManager.h	2;"	d
CGlobalParamManager	include/GlobalParamManager.h	/^class CGlobalParamManager$/;"	c
CGlobalParamManager	src/GlobalParamManager.cpp	/^CGlobalParamManager::CGlobalParamManager()$/;"	f	class:CGlobalParamManager
CHANDLEMESSAGETHREAD_H	include/HandleMessageThread.h	2;"	d
CHandleMessage	include/HandleMessage.h	/^class CHandleMessage : public IServerSocketItemSink, public IDataBaseResultSink$/;"	c
CHandleMessage	src/HandleMessage.cpp	/^CHandleMessage::CHandleMessage()$/;"	f	class:CHandleMessage
CHandleMessageThread	include/HandleMessageThread.h	/^class CHandleMessageThread : public CServiceThread$/;"	c
CHandleMessageThread	src/HandleMessageThread.cpp	/^CHandleMessageThread::CHandleMessageThread()$/;"	f	class:CHandleMessageThread
CLOG_H	include/Log.h	2;"	d
CLocker	include/Locker.h	/^class CLocker$/;"	c
CLocker	src/Locker.cpp	/^CLocker::CLocker()$/;"	f	class:CLocker
CLog	include/Log.h	/^class CLog$/;"	c
CLog	src/Log.cpp	/^CLog::CLog()$/;"	f	class:CLog
CMD_Buffer	include/GlobleData.h	/^struct CMD_Buffer$/;"	s
CMD_Command	include/GlobleData.h	/^struct CMD_Command$/;"	s
CMD_Head	include/GlobleData.h	/^struct CMD_Head$/;"	s
CMD_Info	include/GlobleData.h	/^struct CMD_Info$/;"	s
CMD_KN_DetectSocket	include/GlobleData.h	/^struct CMD_KN_DetectSocket$/;"	s
CMYSQLDATAHANDLE_H	include/MySqlDataHandle.h	2;"	d
CMySqlDataHandle	include/MySqlDataHandle.h	/^class CMySqlDataHandle : public IDataHandleSink$/;"	c
CMySqlDataHandle	src/MySqlDataHandle.cpp	/^CMySqlDataHandle::CMySqlDataHandle()$/;"	f	class:CMySqlDataHandle
CNetworkEngine	include/NetworkEngine.h	/^class CNetworkEngine : public INetworkSink$/;"	c
CNetworkEngine	src/NetworkEngine.cpp	/^CNetworkEngine::CNetworkEngine(const char *strListenPort)$/;"	f	class:CNetworkEngine
CNetworkEngine_INCLUDED	include/NetworkEngine.h	2;"	d
CRequestThread	include/RequestThread.h	/^class CRequestThread : public CServiceThread$/;"	c
CRequestThread	src/RequestThread.cpp	/^CRequestThread::CRequestThread()$/;"	f	class:CRequestThread
CSENDTHREAD_H	include/SendThread.h	2;"	d
CSOCKETITEM_H	include/SocketItem.h	2;"	d
CSem	include/Locker.h	/^class CSem$/;"	c
CSem	src/Locker.cpp	/^CSem::CSem()$/;"	f	class:CSem
CSendThread	include/SendThread.h	/^class CSendThread : public CServiceThread$/;"	c
CSendThread	src/SendThread.cpp	/^CSendThread::CSendThread(unsigned int MaxRequests)$/;"	f	class:CSendThread
CServiceThread	include/ServiceThread.h	/^class CServiceThread$/;"	c
CServiceThread	src/ServiceThread.cpp	/^CServiceThread::CServiceThread()$/;"	f	class:CServiceThread
CSingleton	include/Singleton.h	/^    CSingleton()    {}$/;"	f	class:CSingleton
CSingleton	include/Singleton.h	/^    CSingleton(const CSingleton&)   {}$/;"	f	class:CSingleton
CSingleton	include/Singleton.h	/^class CSingleton$/;"	c
CSocketItem	include/SocketItem.h	/^class CSocketItem$/;"	c
CSocketItem	src/SocketItem.cpp	/^CSocketItem::CSocketItem(IServerSocketItemSink *pSink)$/;"	f	class:CSocketItem
CSocketItemManager	include/SocketItemManager.h	/^class CSocketItemManager : public CSingleton<CSocketItemManager>$/;"	c
CSocketItemManager	src/SocketItemManager.cpp	/^CSocketItemManager::CSocketItemManager()$/;"	f	class:CSocketItemManager
CSocketItemManager_H	include/SocketItemManager.h	2;"	d
CStr	include/tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter
CWORKTHREAD_H	include/WorkThread.h	2;"	d
CWorkThread	include/WorkThread.h	/^class CWorkThread : public CServiceThread$/;"	c
CWorkThread	src/WorkThread.cpp	/^CWorkThread::CWorkThread()$/;"	f	class:CWorkThread
CXMLDataHandle	include/XMLDataHandle.h	/^class CXMLDataHandle : public IDataHandleSink$/;"	c
CXMLDataHandle	src/XMLDataHandle.cpp	/^CXMLDataHandle::CXMLDataHandle(const char *strFileName)$/;"	f	class:CXMLDataHandle
Child	include/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle
Child	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle
Child	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle
ChildElement	include/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle
ChildElement	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle
ChildElement	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle
Clear	include/tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor
Clear	src/tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode
ClearError	include/tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument
ClearThis	src/tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement
Clone	src/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment
Clone	src/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration
Clone	src/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument
Clone	src/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement
Clone	src/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText
Clone	src/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown
CloseSocket	src/SocketItem.cpp	/^void CSocketItem::CloseSocket(void)$/;"	f	class:CSocketItem
CmdInfo	include/GlobleData.h	/^	CMD_Info							CmdInfo;							\/\/基础结构$/;"	m	struct:CMD_Head
Column	include/tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase
CommandInfo	include/GlobleData.h	/^	CMD_Command							CommandInfo;						\/\/命令信息$/;"	m	struct:CMD_Head
ConcludeThread	src/ServiceThread.cpp	/^bool CServiceThread::ConcludeThread(DWORD dwMillSeconds)$/;"	f	class:CServiceThread
ConnectMysql	src/MySqlDataHandle.cpp	/^MYSQL *CMySqlDataHandle::ConnectMysql(unsigned long flag)$/;"	f	class:CMySqlDataHandle
ConvertUTF32ToUTF8	src/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase
CopyTo	src/tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment
CopyTo	src/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration
CopyTo	src/tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument
CopyTo	src/tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement
CopyTo	src/tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode
CopyTo	src/tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText
CopyTo	src/tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown
CountArray	include/GlobleData.h	22;"	d
CreateBindedSocket	src/NetworkEngine.cpp	/^int CNetworkEngine::CreateBindedSocket()$/;"	f	class:CNetworkEngine
CreateEpoll	src/NetworkEngine.cpp	/^int CNetworkEngine::CreateEpoll( int iSize )$/;"	f	class:CNetworkEngine
Cursor	src/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData
DATAENGINE_H	include/DataEngine.h	2;"	d
DBR_GP_Result_LogonByAccounts	include/GlobleData.h	/^struct DBR_GP_Result_LogonByAccounts$/;"	s
DBR_GP_Result_Register_Success	include/GlobleData.h	/^struct DBR_GP_Result_Register_Success$/;"	s
DBR_LOGON_BY_ACCOUNTS	include/GlobleData.h	150;"	d
DBR_LOGON_BY_USERID	include/GlobleData.h	151;"	d
DBR_LOGON_ERROR	include/GlobleData.h	157;"	d
DBR_LOGON_SUCCESS	include/GlobleData.h	156;"	d
DBR_LogonByAccounts	include/GlobleData.h	/^struct DBR_LogonByAccounts$/;"	s
DBR_LogonByUserID	include/GlobleData.h	/^struct DBR_LogonByUserID$/;"	s
DBR_REGISTER_ACCOUNTS	include/GlobleData.h	152;"	d
DBR_RegisterAccounts	include/GlobleData.h	/^struct DBR_RegisterAccounts$/;"	s
DB_ERROR	include/GlobleData.h	147;"	d
DB_LOGON_ERROR	include/GlobleData.h	144;"	d
DB_LOGON_NO_EXISTE	include/GlobleData.h	143;"	d
DB_LOGON_PASSWD_ERROR	include/GlobleData.h	145;"	d
DB_LOGON_SUCCESS	include/GlobleData.h	142;"	d
DB_REGISTER_ERROR	include/GlobleData.h	140;"	d
DB_REGISTER_SUCCESS	include/GlobleData.h	138;"	d
DB_REGISTER_USER_EXISTE	include/GlobleData.h	139;"	d
DB_RESULT_LOGON_ERROR	include/GlobleData.h	241;"	d
DB_RESULT_LOGON_NO_EXIST	include/GlobleData.h	240;"	d
DB_RESULT_LOGON_PASSWORD_ERROR	include/GlobleData.h	243;"	d
DB_RESULT_LOGON_SUCCESS	include/GlobleData.h	242;"	d
DB_RESULT_REGISTER_ERROR	include/GlobleData.h	247;"	d
DB_RESULT_REGISTER_EXIST	include/GlobleData.h	246;"	d
DB_RESULT_REGISTER_SUCCESS	include/GlobleData.h	248;"	d
DEBUG	include/tinyxml.h	43;"	d
DWORD	include/GlobleData.h	/^typedef unsigned long       DWORD;$/;"	t
DataBaseResultSink	src/HandleMessage.cpp	/^int CHandleMessage::DataBaseResultSink(WORD wRequestID, int Socket, void* pData, WORD wDataSize)$/;"	f	class:CHandleMessage
DoIndent	include/tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter
DoLineBreak	include/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter
DoubleValue	src/tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute
Element	include/tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle
EncodeString	src/tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase
Encoding	include/tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration
Entity	include/tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase
Error	include/tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument
ErrorCol	include/tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument
ErrorDesc	include/tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument
ErrorId	include/tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument
ErrorRow	include/tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument
Find	src/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet
Find	src/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet
FindOrCreate	src/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet
FindOrCreate	src/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet
FinishWithError	src/MySqlDataHandle.cpp	/^void CMySqlDataHandle::FinishWithError(MYSQL *pConnection)$/;"	f	class:CMySqlDataHandle
First	include/tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet
First	include/tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet
FirstAttribute	include/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement
FirstAttribute	include/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement
FirstChild	include/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle
FirstChild	include/tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode
FirstChild	include/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChild	include/tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode
FirstChild	include/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChild	include/tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode
FirstChild	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle
FirstChild	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle
FirstChild	src/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode
FirstChildElement	include/tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode
FirstChildElement	include/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChildElement	include/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode
FirstChildElement	include/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle
FirstChildElement	include/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChildElement	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle
FirstChildElement	src/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle
FirstChildElement	src/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode
FirstChildElement	src/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode
FreeClient	src/ClientManager.cpp	/^bool CClientManager::FreeClient(WORD wClientIndex)$/;"	f	class:CClientManager
FreeSocketItem	src/SocketItemManager.cpp	/^bool CSocketItemManager::FreeSocketItem(WORD wIndex)$/;"	f	class:CSocketItemManager
GLOBLEDATA_INCLUDED	include/GlobleData.h	2;"	d
GetChar	include/tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
GetClient	src/ClientManager.cpp	/^CClient *CClientManager::GetClient(int Socket)$/;"	f	class:CClientManager
GetDocument	include/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode
GetDocument	src/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode
GetEntity	src/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
GetHandleMessageSink	src/ClientManager.cpp	/^IServerSocketItemSink *CClientManager::GetHandleMessageSink(void)$/;"	f	class:CClientManager
GetOnLine	src/ClientManager.cpp	/^vector<CClient *> CClientManager::GetOnLine(void)$/;"	f	class:CClientManager
GetOnLine	src/SocketItemManager.cpp	/^std::vector<CSocketItem *> CSocketItemManager::GetOnLine(void)$/;"	f	class:CSocketItemManager
GetRemoteAddr	src/SocketItem.cpp	/^int CSocketItem::GetRemoteAddr(const struct sockaddr* pSocketAddr, char* strHost, char* strPort)$/;"	f	class:CSocketItem
GetServerSocketItemSink	src/SocketItemManager.cpp	/^IServerSocketItemSink *CSocketItemManager::GetServerSocketItemSink()$/;"	f	class:CSocketItemManager
GetSocket	src/SocketItem.cpp	/^int CSocketItem::GetSocket() const$/;"	f	class:CSocketItem
GetSocketItem	src/SocketItemManager.cpp	/^CSocketItem *CSocketItemManager::GetSocketItem(int Socket)$/;"	f	class:CSocketItemManager
GetText	src/tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement
GetUserData	include/tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
GetUserData	include/tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
HANDMESSAGE_H_INCLUDED	include/HandleMessage.h	2;"	d
Head	include/GlobleData.h	/^	CMD_Head							Head;								\/\/数据包头$/;"	m	struct:CMD_Buffer
IDataBaseResultSink	include/interface.h	/^class IDataBaseResultSink$/;"	c
IDataEngineSink	include/interface.h	/^class IDataEngineSink$/;"	c
IDataHandleSink	include/interface.h	/^class IDataHandleSink$/;"	c
INTERFACE_H_INCLUDED	include/interface.h	2;"	d
INetworkSink	include/interface.h	/^class INetworkSink$/;"	c
IPostDataBaseRequestSink	include/interface.h	/^class IPostDataBaseRequestSink$/;"	c
IServerSocketItemSink	include/interface.h	/^class IServerSocketItemSink$/;"	c
Identify	src/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode
Indent	include/tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter
InitListen	src/NetworkEngine.cpp	/^int CNetworkEngine::InitListen(void)$/;"	f	class:CNetworkEngine
InsertAfterChild	src/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
InsertBeforeChild	src/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
InsertEndChild	src/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
Instance	include/Singleton.h	/^    static T&           Instance()$/;"	f	class:CSingleton
Instance	src/GlobalParamManager.cpp	/^CGlobalParamManager &CGlobalParamManager::Instance()$/;"	f	class:CGlobalParamManager
Instance	src/Log.cpp	/^CLog *CLog::Instance()$/;"	f	class:CLog
IntValue	src/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute
IsAlpha	src/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase
IsAlphaNum	src/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase
IsExistUser	src/XMLDataHandle.cpp	/^bool CXMLDataHandle::IsExistUser(char *strAccount)$/;"	f	class:CXMLDataHandle
IsExistsUser	src/MySqlDataHandle.cpp	/^bool CMySqlDataHandle::IsExistsUser(char *strAccount)$/;"	f	class:CMySqlDataHandle
IsRuning	src/ServiceThread.cpp	/^bool CServiceThread::IsRuning(void)$/;"	f	class:CServiceThread
IsWhiteSpace	include/tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase
IsWhiteSpace	include/tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase
IsWhiteSpaceCondensed	include/tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase
IterateChildren	include/tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode
IterateChildren	include/tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode
IterateChildren	include/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
IterateChildren	include/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
IterateChildren	src/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode
IterateChildren	src/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode
LOCKER_H	include/Locker.h	2;"	d
Last	include/tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet
Last	include/tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet
LastAttribute	include/tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement
LastAttribute	include/tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement
LastChild	include/tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode
LastChild	include/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
LastChild	include/tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode
LastChild	include/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
LastChild	include/tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode
LastChild	src/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode
LineBreak	include/tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter
LinkEndChild	src/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode
ListenClient	src/SocketItem.cpp	/^int CSocketItem::ListenClient(void)$/;"	f	class:CSocketItem
LoadConfig	src/GlobalParamManager.cpp	/^bool CGlobalParamManager::LoadConfig()$/;"	f	class:CGlobalParamManager
LoadFile	include/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument
LoadFile	src/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	src/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	src/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
Lock	src/Locker.cpp	/^bool CLocker::Lock()$/;"	f	class:CLocker
LogonByAccounts	src/MySqlDataHandle.cpp	/^int CMySqlDataHandle::LogonByAccounts(char *strAccount, char *strPasswd)$/;"	f	class:CMySqlDataHandle
LogonByAccounts	src/XMLDataHandle.cpp	/^int CXMLDataHandle::LogonByAccounts(char* strAccount, char* strPasswd)$/;"	f	class:CXMLDataHandle
MAXEVENTS	src/WorkThread.cpp	16;"	d	file:
MAXFD	main.cpp	14;"	d	file:
MAX_ENTITY_LENGTH	include/tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon3
MAX_QUEUE_SIZE	include/GlobleData.h	28;"	d
MDM_CHAT	include/GlobleData.h	266;"	d
MDM_KN_COMMAND	include/GlobleData.h	33;"	d
MDM_LOGON	include/GlobleData.h	76;"	d
MESSAGE_BUFFER	include/GlobleData.h	29;"	d
NUM_ENTITY	include/tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon3
Name	include/tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute
NameTStr	include/tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute
Next	include/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute
Next	src/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute
NextSibling	include/tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode
NextSibling	include/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSibling	include/tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode
NextSibling	include/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSibling	include/tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode
NextSibling	src/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode
NextSiblingElement	include/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode
NextSiblingElement	include/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSiblingElement	include/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode
NextSiblingElement	include/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSiblingElement	src/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode
NextSiblingElement	src/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode
NoChildren	include/tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode
Node	include/tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle
NodeType	include/tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode
NullLineEndings	src/xmltest.cpp	/^void NullLineEndings( char* p )$/;"	f
OnAcceptSink	src/HandleMessage.cpp	/^int CHandleMessage::OnAcceptSink(int fdEpoll, int socket, struct sockaddr in_addr)$/;"	f	class:CHandleMessage
OnAccepteEvent	src/SocketItem.cpp	/^bool CSocketItem::OnAccepteEvent(int fdEpoll)$/;"	f	class:CSocketItem
OnCloseEvent	src/SocketItem.cpp	/^bool CSocketItem::OnCloseEvent(void)$/;"	f	class:CSocketItem
OnDataEngineSink	src/DataEngine.cpp	/^int CDataEngine::OnDataEngineSink(WORD wRequestID, int Socket, void* pData, WORD wDataSize)$/;"	f	class:CDataEngine
OnEventThreadConclude	include/ServiceThread.h	/^	virtual bool OnEventThreadConclude() { return true; }$/;"	f	class:CServiceThread
OnEventThreadConclude	src/DataBaseThread.cpp	/^bool CDataBaseThread::OnEventThreadConclude(void)$/;"	f	class:CDataBaseThread
OnEventThreadConclude	src/HandleMessageThread.cpp	/^bool CHandleMessageThread::OnEventThreadConclude(void)$/;"	f	class:CHandleMessageThread
OnEventThreadConclude	src/RequestThread.cpp	/^bool CRequestThread::OnEventThreadConclude(void)$/;"	f	class:CRequestThread
OnEventThreadConclude	src/SendThread.cpp	/^bool CSendThread::OnEventThreadConclude()$/;"	f	class:CSendThread
OnEventThreadConclude	src/WorkThread.cpp	/^bool CWorkThread::OnEventThreadConclude(void)$/;"	f	class:CWorkThread
OnEventThreadRun	include/ServiceThread.h	/^	virtual bool OnEventThreadRun(void) { return true; }$/;"	f	class:CServiceThread
OnEventThreadRun	src/DataBaseThread.cpp	/^bool CDataBaseThread::OnEventThreadRun(void)$/;"	f	class:CDataBaseThread
OnEventThreadRun	src/HandleMessageThread.cpp	/^bool CHandleMessageThread::OnEventThreadRun(void)$/;"	f	class:CHandleMessageThread
OnEventThreadRun	src/RequestThread.cpp	/^bool CRequestThread::OnEventThreadRun(void)$/;"	f	class:CRequestThread
OnEventThreadRun	src/SendThread.cpp	/^bool CSendThread::OnEventThreadRun()$/;"	f	class:CSendThread
OnEventThreadRun	src/WorkThread.cpp	/^bool CWorkThread::OnEventThreadRun(void)$/;"	f	class:CWorkThread
OnEventThreadStrat	include/ServiceThread.h	/^	virtual bool OnEventThreadStrat() { return true; }$/;"	f	class:CServiceThread
OnEventThreadStrat	src/DataBaseThread.cpp	/^bool CDataBaseThread::OnEventThreadStrat(void)$/;"	f	class:CDataBaseThread
OnEventThreadStrat	src/HandleMessageThread.cpp	/^bool CHandleMessageThread::OnEventThreadStrat(void)$/;"	f	class:CHandleMessageThread
OnEventThreadStrat	src/RequestThread.cpp	/^bool CRequestThread::OnEventThreadStrat(void)$/;"	f	class:CRequestThread
OnEventThreadStrat	src/SendThread.cpp	/^bool CSendThread::OnEventThreadStrat()$/;"	f	class:CSendThread
OnEventThreadStrat	src/WorkThread.cpp	/^bool CWorkThread::OnEventThreadStrat(void)$/;"	f	class:CWorkThread
OnReadEvent	src/SocketItem.cpp	/^bool CSocketItem::OnReadEvent(void)$/;"	f	class:CSocketItem
OnReadSink	src/HandleMessage.cpp	/^int CHandleMessage::OnReadSink(CMD_Command Command, void *pBuffer, WORD wDataSize, int Socket)$/;"	f	class:CHandleMessage
OnSendEvent	src/SocketItem.cpp	/^bool CSocketItem::OnSendEvent(void)$/;"	f	class:CSocketItem
OnSocketChat	src/HandleMessage.cpp	/^bool CHandleMessage::OnSocketChat(WORD wSubCmdID, void* pData, WORD wDataSize, int Socket)$/;"	f	class:CHandleMessage
OnSocketMainLogon	src/HandleMessage.cpp	/^bool CHandleMessage::OnSocketMainLogon(WORD wSubCmdID, void* pData, WORD wDataSize, int Socket)$/;"	f	class:CHandleMessage
PASS_LEN	include/GlobleData.h	19;"	d
Packet_Chat_ChatByAll	include/GlobleData.h	/^struct Packet_Chat_ChatByAll$/;"	s
Packet_Chat_ChatBySingle	include/GlobleData.h	/^struct Packet_Chat_ChatBySingle$/;"	s
Packet_Layout	include/GlobleData.h	/^struct Packet_Layout$/;"	s
Packet_Logon_LogonByAccounts	include/GlobleData.h	/^struct Packet_Logon_LogonByAccounts$/;"	s
Packet_Logon_LogonByUserID	include/GlobleData.h	/^struct Packet_Logon_LogonByUserID$/;"	s
Packet_Logon_RegisterAccounts	include/GlobleData.h	/^struct Packet_Logon_RegisterAccounts$/;"	s
Packet_Result_Chat	include/GlobleData.h	/^struct Packet_Result_Chat$/;"	s
Packet_Result_Logon	include/GlobleData.h	/^struct Packet_Result_Logon$/;"	s
Parent	include/tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode
Parent	include/tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText
Parse	src/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown
Post	src/Locker.cpp	/^bool CSem::Post()$/;"	f	class:CSem
PostDataBaseRequest	src/DataEngine.cpp	/^int CDataEngine::PostDataBaseRequest(WORD wRequestID, int Socket, void* pData, WORD wDataSize)$/;"	f	class:CDataEngine
Previous	include/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute
Previous	src/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute
PreviousSibling	include/tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode
PreviousSibling	include/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
PreviousSibling	include/tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode
PreviousSibling	include/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
PreviousSibling	include/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode
PreviousSibling	src/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode
Print	include/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute
Print	include/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration
Print	include/tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument
Print	src/Log.cpp	/^void CLog::Print(const char* log)$/;"	f	class:CLog
Print	src/tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute
Print	src/tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment
Print	src/tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration
Print	src/tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument
Print	src/tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement
Print	src/tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText
Print	src/tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown
PrintAddr	src/SocketItem.cpp	/^int CSocketItem::PrintAddr(void)$/;"	f	class:CSocketItem
QueryBoolAttribute	src/tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement
QueryDoubleAttribute	src/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement
QueryDoubleAttribute	src/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement
QueryDoubleValue	src/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute
QueryFloatAttribute	include/tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement
QueryIntAttribute	src/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement
QueryIntAttribute	src/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement
QueryIntValue	src/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute
QueryStringAttribute	include/tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement
QueryUnsignedAttribute	src/tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement
QueryUser	src/XMLDataHandle.cpp	/^tagUserData CXMLDataHandle::QueryUser(char *strAccount)$/;"	f	class:CXMLDataHandle
QueryValueAttribute	include/tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement
QueryValueAttribute	include/tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement
Quit	src/Client.cpp	/^bool CClient::Quit()$/;"	f	class:CClient
REQUESTTHREAD_H	include/RequestThread.h	2;"	d
RESULT_LAYOUT_ERROR	include/GlobleData.h	87;"	d
RESULT_LAYOUT_SUCCESS	include/GlobleData.h	88;"	d
RESULT_LOGON_ERROR	include/GlobleData.h	96;"	d
RESULT_LOGON_NO_USER	include/GlobleData.h	95;"	d
RESULT_LOGON_ONLINE	include/GlobleData.h	98;"	d
RESULT_LOGON_PASSWD_ERROR	include/GlobleData.h	97;"	d
RESULT_LOGON_SUCCESS	include/GlobleData.h	94;"	d
RESULT_REGISTER_ERROR	include/GlobleData.h	92;"	d
RESULT_REGISTER_SUCCESS	include/GlobleData.h	90;"	d
RESULT_REGISTER_USER_EXISTE	include/GlobleData.h	91;"	d
ReSetData	src/SocketItem.cpp	/^bool CSocketItem::ReSetData()$/;"	f	class:CSocketItem
ReadName	src/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
ReadText	src/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase
ReadValue	src/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement
RegisterAccounts	src/MySqlDataHandle.cpp	/^int CMySqlDataHandle::RegisterAccounts(char *strAccount, char *strPasswd)$/;"	f	class:CMySqlDataHandle
RegisterAccounts	src/XMLDataHandle.cpp	/^int CXMLDataHandle::RegisterAccounts(char* strAccount, char* strPasswd)$/;"	f	class:CXMLDataHandle
Remove	src/tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet
RemoveAttribute	include/tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement
RemoveAttribute	src/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement
RemoveChild	src/tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode
Rep	include/tinystr.h	/^	struct Rep$/;"	s	class:TiXmlString
ReplaceChild	src/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode
ResetData	src/Client.cpp	/^void CClient::ResetData()$/;"	f	class:CClient
Result_ChatBySingle_NO_ONLINE	include/GlobleData.h	272;"	d
Result_ChatBySingle_NO_PEOPLE	include/GlobleData.h	271;"	d
Result_LOGON_ERROR	include/GlobleData.h	84;"	d
Result_LOGON_FINISH	include/GlobleData.h	85;"	d
Result_LOGON_SUCCESS	include/GlobleData.h	83;"	d
RootElement	include/tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument
RootElement	include/tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument
Row	include/tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase
SAFE_DELETE	include/GlobleData.h	11;"	d
SERVICETHREAD_H	include/ServiceThread.h	2;"	d
SINGLETON_INCLUDED	include/Singleton.h	2;"	d
SOCKET_BUFFER	include/GlobleData.h	26;"	d
SOCKET_PACKET	include/GlobleData.h	27;"	d
SOCKET_VER	include/GlobleData.h	25;"	d
SUB_CHAT_ALL	include/GlobleData.h	268;"	d
SUB_CHAT_RESULT	include/GlobleData.h	269;"	d
SUB_CHAT_SINGLE	include/GlobleData.h	267;"	d
SUB_KN_DETECT_SOCKET	include/GlobleData.h	34;"	d
SUB_KN_SHUT_DOWN_SOCKET	include/GlobleData.h	35;"	d
SUB_LAYOUT	include/GlobleData.h	81;"	d
SUB_LOGON_ACCOUNTS	include/GlobleData.h	78;"	d
SUB_LOGON_USERID	include/GlobleData.h	79;"	d
SUB_REGISTER_ACCOUNTS	include/GlobleData.h	80;"	d
SaveFile	include/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument
SaveFile	src/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument
SaveFile	src/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument
SaveFile	src/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument
SearchWithName	src/ClientManager.cpp	/^CClient *CClientManager::SearchWithName(const string name)$/;"	f	class:CClientManager
SearchWithName	src/SocketItemManager.cpp	/^CSocketItem *CSocketItemManager::SearchWithName(const std::string name)$/;"	f	class:CSocketItemManager
SendData	src/NetworkEngine.cpp	/^bool CNetworkEngine::SendData(int Socket, void* pData, WORD wDataSize, WORD wMainCmdID, WORD wSubCmdID)$/;"	f	class:CNetworkEngine
SendData	src/SocketItem.cpp	/^bool CSocketItem::SendData(WORD wMainCmdID, WORD wSubCmdID)$/;"	f	class:CSocketItem
SendData	src/SocketItem.cpp	/^bool CSocketItem::SendData(void* pData, WORD wDataSize, WORD wMainCmdID, WORD wSubCmdID)$/;"	f	class:CSocketItem
SendDataBuffer	src/SocketItem.cpp	/^DWORD CSocketItem::SendDataBuffer(int socket, void* pBuffer, WORD wSendSize)$/;"	f	class:CSocketItem
SetAddr	src/SocketItem.cpp	/^int CSocketItem::SetAddr(const struct sockaddr SocketAddr)$/;"	f	class:CSocketItem
SetAttribute	src/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement
SetAttribute	src/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement
SetAttribute	src/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement
SetAttribute	src/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement
SetCDATA	include/tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText
SetCondenseWhiteSpace	include/tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase
SetDataBaseResultSink	src/DataEngine.cpp	/^int CDataEngine::SetDataBaseResultSink(IDataBaseResultSink* pSink)$/;"	f	class:CDataEngine
SetDataEngineSink	src/DataBaseThread.cpp	/^int CDataBaseThread::SetDataEngineSink(IDataEngineSink *pDataEngineSink)$/;"	f	class:CDataBaseThread
SetDataEngineSink	src/RequestThread.cpp	/^int CRequestThread::SetDataEngineSink(IDataEngineSink *pDataEngineSink)$/;"	f	class:CRequestThread
SetDataHanleSink	src/DataEngine.cpp	/^int CDataEngine::SetDataHanleSink(IDataHandleSink* pDataHandleSink)$/;"	f	class:CDataEngine
SetDocument	include/tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute
SetDoubleAttribute	src/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement
SetDoubleAttribute	src/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement
SetDoubleValue	src/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute
SetEpollFD	src/WorkThread.cpp	/^bool CWorkThread::SetEpollFD(int fd)$/;"	f	class:CWorkThread
SetError	src/tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
SetHandleMessageSink	src/ClientManager.cpp	/^void CClientManager::SetHandleMessageSink(IServerSocketItemSink* pSink)$/;"	f	class:CClientManager
SetHandleMessageSink	src/SocketItemManager.cpp	/^void CSocketItemManager::SetHandleMessageSink(IServerSocketItemSink* pSink)$/;"	f	class:CSocketItemManager
SetIndent	include/tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter
SetIntValue	src/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute
SetLineBreak	include/tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter
SetListenSocketItem	src/WorkThread.cpp	/^bool CWorkThread::SetListenSocketItem(CSocketItem* pSocketItem)$/;"	f	class:CWorkThread
SetLoggingAcceptor	src/WorkThread.cpp	/^bool CWorkThread::SetLoggingAcceptor(CLoggingAcceptor* pAcceptor)$/;"	f	class:CWorkThread
SetName	include/tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute
SetName	include/tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute
SetNetworkdSink	src/HandleMessage.cpp	/^int CHandleMessage::SetNetworkdSink(INetworkSink* pSink)$/;"	f	class:CHandleMessage
SetNonBlock	src/SocketItem.cpp	/^int CSocketItem::SetNonBlock(void)$/;"	f	class:CSocketItem
SetPostDataBaseRequestSink	src/HandleMessage.cpp	/^int CHandleMessage::SetPostDataBaseRequestSink(IPostDataBaseRequestSink* pPostDataBaseRequestSink)$/;"	f	class:CHandleMessage
SetServerSocketItemSink	src/SocketItem.cpp	/^int CSocketItem::SetServerSocketItemSink(IServerSocketItemSink* pServerSocketItemSink)$/;"	f	class:CSocketItem
SetStorageCount	src/ClientManager.cpp	/^void CClientManager::SetStorageCount(WORD wCount)$/;"	f	class:CClientManager
SetStorageCount	src/SocketItemManager.cpp	/^void CSocketItemManager::SetStorageCount(WORD wCount)$/;"	f	class:CSocketItemManager
SetStreamPrinting	include/tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter
SetTabSize	include/tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument
SetUserData	include/tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
SetValue	include/tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute
SetValue	include/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute
SetValue	include/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode
SetValue	include/tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode
Signal	src/Locker.cpp	/^bool CCond::Signal()$/;"	f	class:CCond
SingleChat	src/HandleMessage.cpp	/^bool CHandleMessage::SingleChat(void* pData, WORD wDataSize, int Socket)$/;"	f	class:CHandleMessage
Size	include/tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter
SkipWhiteSpace	src/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
Socket	include/GlobleData.h	/^    int                             Socket;$/;"	m	struct:tagDBRequest
Socket	include/GlobleData.h	/^    int                             Socket;$/;"	m	struct:tagSendRequest
Stamp	src/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData
Standalone	include/tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration
Start	src/ChatRoom.cpp	/^bool CChatRoom::Start(void)$/;"	f	class:CChatRoom
Start	src/DataEngine.cpp	/^bool CDataEngine::Start(void)$/;"	f	class:CDataEngine
Start	src/NetworkEngine.cpp	/^bool CNetworkEngine::Start(void)$/;"	f	class:CNetworkEngine
StartThread	src/ServiceThread.cpp	/^bool CServiceThread::StartThread(void)$/;"	f	class:CServiceThread
Stop	src/ChatRoom.cpp	/^bool CChatRoom::Stop(void)$/;"	f	class:CChatRoom
Stop	src/DataEngine.cpp	/^bool CDataEngine::Stop(void)$/;"	f	class:CDataEngine
Stop	src/NetworkEngine.cpp	/^bool CNetworkEngine::Stop(void)$/;"	f	class:CNetworkEngine
Str	include/tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter
StreamIn	src/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment
StreamIn	src/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration
StreamIn	src/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument
StreamIn	src/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement
StreamIn	src/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText
StreamIn	src/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown
StreamTo	src/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase
StreamWhiteSpace	src/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase
StringEqual	src/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase
TINYXML_COMMENT	include/tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DECLARATION	include/tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DOCUMENT	include/tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_ELEMENT	include/tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_INCLUDED	include/tinyxml.h	27;"	d
TINYXML_TEXT	include/tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_TYPECOUNT	include/tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TINYXML_UNKNOWN	include/tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TIXML_DEFAULT_ENCODING	include/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	include/tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	include/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	include/tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	include/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_DOCUMENT_EMPTY	include/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_DOCUMENT_TOP_ONLY	include/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_EMBEDDED_NULL	include/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	include/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_OPENING_FILE	include/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_CDATA	include/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_COMMENT	include/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_DECLARATION	include/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_ELEMENT	include/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_EMPTY	include/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_PARSING_UNKNOWN	include/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_READING_ATTRIBUTES	include/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_READING_ELEMENT_VALUE	include/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_READING_END_TAG	include/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon2
TIXML_ERROR_STRING_COUNT	include/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon2
TIXML_EXPLICIT	include/tinystr.h	39;"	d
TIXML_EXPLICIT	include/tinystr.h	42;"	d
TIXML_EXPLICIT	include/tinystr.h	44;"	d
TIXML_LOG	src/tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	src/tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	include/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	include/tinyxml.h	/^const int TIXML_MINOR_VERSION = 6;$/;"	v
TIXML_NO_ATTRIBUTE	include/tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon1
TIXML_NO_ERROR	include/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon2
TIXML_PATCH_VERSION	include/tinyxml.h	/^const int TIXML_PATCH_VERSION = 2;$/;"	v
TIXML_SAFE	include/tinyxml.h	60;"	d
TIXML_SNPRINTF	include/tinyxml.h	65;"	d
TIXML_SNPRINTF	include/tinyxml.h	70;"	d
TIXML_SNPRINTF	include/tinyxml.h	75;"	d
TIXML_SNPRINTF	include/tinyxml.h	78;"	d
TIXML_SSCANF	include/tinyxml.h	66;"	d
TIXML_SSCANF	include/tinyxml.h	71;"	d
TIXML_SSCANF	include/tinyxml.h	76;"	d
TIXML_SSCANF	include/tinyxml.h	79;"	d
TIXML_STRING	include/tinyxml.h	50;"	d
TIXML_STRING	include/tinyxml.h	53;"	d
TIXML_STRING_INCLUDED	include/tinystr.h	28;"	d
TIXML_SUCCESS	include/tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:__anon1
TIXML_UTF_LEAD_0	src/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	src/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	src/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	include/tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:__anon1
TabSize	include/tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument
Text	include/tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle
ThreadFunction	src/ServiceThread.cpp	/^void *CServiceThread::ThreadFunction(void *pThreadData)$/;"	f	class:CServiceThread
TiXmlAttribute	include/tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	include/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	include/tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute
TiXmlAttribute	include/tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c
TiXmlAttributeSet	include/tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlAttributeSet	src/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
TiXmlBase	include/tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase
TiXmlBase	include/tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlComment	include/tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment
TiXmlComment	include/tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment
TiXmlComment	include/tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c
TiXmlComment	src/tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment
TiXmlCursor	include/tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor
TiXmlCursor	include/tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlDeclaration	include/tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	include/tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c
TiXmlDeclaration	src/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	src/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	src/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration
TiXmlDocument	include/tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c
TiXmlDocument	src/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	src/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlElement	include/tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c
TiXmlElement	src/tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement
TiXmlElement	src/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement
TiXmlElement	src/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement
TiXmlEncoding	include/tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	src/tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f
TiXmlHandle	include/tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	include/tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	include/tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlNode	include/tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c
TiXmlNode	src/tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode
TiXmlOutStream	include/tinystr.h	/^class TiXmlOutStream : public TiXmlString$/;"	c
TiXmlParsingData	src/tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:
TiXmlParsingData	src/tinyxmlparser.cpp	/^class TiXmlParsingData$/;"	c	file:
TiXmlPrinter	include/tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter
TiXmlPrinter	include/tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c
TiXmlString	include/tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	include/tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	include/tinystr.h	/^	TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	include/tinystr.h	/^	TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString
TiXmlString	include/tinystr.h	/^class TiXmlString$/;"	c
TiXmlText	include/tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText
TiXmlText	include/tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText
TiXmlText	include/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText
TiXmlText	include/tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c
TiXmlUnknown	include/tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown
TiXmlUnknown	include/tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown
TiXmlUnknown	include/tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c
TiXmlVisitor	include/tinyxml.h	/^class TiXmlVisitor$/;"	c
ToComment	include/tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment
ToComment	include/tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToComment	include/tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToComment	include/tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment
ToDeclaration	include/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration
ToDeclaration	include/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDeclaration	include/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDeclaration	include/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration
ToDocument	include/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument
ToDocument	include/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDocument	include/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDocument	include/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument
ToElement	include/tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle
ToElement	include/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement
ToElement	include/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToElement	include/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToElement	include/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement
ToLower	include/tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
ToNode	include/tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle
ToText	include/tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle
ToText	include/tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToText	include/tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText
ToText	include/tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToText	include/tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText
ToUnknown	include/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle
ToUnknown	include/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown
ToUnknown	include/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToUnknown	include/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown
ToUnknown	include/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
Type	include/tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode
Unknown	include/tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle
Unlock	src/Locker.cpp	/^bool CLocker::Unlock()$/;"	f	class:CLocker
Value	include/tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode
Value	include/tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute
ValueStr	include/tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute
ValueStr	include/tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode
ValueTStr	include/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode
Version	include/tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration
Visit	include/tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
Visit	include/tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor
Visit	include/tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor
Visit	include/tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
Visit	src/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter
Visit	src/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter
Visit	src/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter
Visit	src/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter
VisitEnter	include/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitEnter	include/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor
VisitEnter	src/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter
VisitEnter	src/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter
VisitExit	include/tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitExit	include/tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor
VisitExit	src/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter
VisitExit	src/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter
WORD	include/GlobleData.h	/^typedef unsigned short      WORD;$/;"	t
Wait	src/Locker.cpp	/^bool CCond::Wait()$/;"	f	class:CCond
Wait	src/Locker.cpp	/^bool CSem::Wait()$/;"	f	class:CSem
XMLDATAHANDLE_H	include/XMLDataHandle.h	2;"	d
XmlTest	src/xmltest.cpp	/^bool XmlTest (const char* testString, const char* expected, const char* found, bool noEcho )$/;"	f
XmlTest	src/xmltest.cpp	/^bool XmlTest( const char* testString, int expected, int found, bool noEcho )$/;"	f
append	src/tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString
assign	src/tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString
at	include/tinystr.h	/^	const char& at (size_type index) const$/;"	f	class:TiXmlString
attributeSet	include/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement
buffer	include/tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter
c_str	include/tinystr.h	/^	const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString
capacity	include/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep
capacity	include/tinystr.h	/^	size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString
cbBuffer	include/GlobleData.h	/^	BYTE								cbBuffer[SOCKET_PACKET];			\/\/数据缓冲$/;"	m	struct:CMD_Buffer
cbCheckCode	include/GlobleData.h	/^	BYTE								cbCheckCode;						\/\/效验字段$/;"	m	struct:CMD_Info
cbGender	include/GlobleData.h	/^	BYTE								cbGender;						\/\/用户性别$/;"	m	struct:Packet_Logon_RegisterAccounts
cbGender	include/GlobleData.h	/^	BYTE							cbGender;							\/\/用户性别$/;"	m	struct:DBR_RegisterAccounts
cbVersion	include/GlobleData.h	/^	BYTE								cbVersion;							\/\/版本标识$/;"	m	struct:CMD_Info
cdata	include/tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText
chr	include/tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity
clear	include/tinystr.h	/^	void clear ()$/;"	f	class:TiXmlString
col	include/tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor
condenseWhiteSpace	include/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase
condenseWhiteSpace	src/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
cursor	src/tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:
daemon	main.cpp	/^int daemon ()$/;"	f
daemon_init	main.cpp	/^int daemon_init()$/;"	f
data	include/tinystr.h	/^	const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString
depth	include/tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter
document	include/tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute
dwPlazaVersion	include/GlobleData.h	/^	DWORD								dwPlazaVersion;					\/\/广场版本$/;"	m	struct:Packet_Logon_LogonByAccounts
dwPlazaVersion	include/GlobleData.h	/^	DWORD								dwPlazaVersion;					\/\/广场版本$/;"	m	struct:Packet_Logon_LogonByUserID
dwPlazaVersion	include/GlobleData.h	/^	DWORD								dwPlazaVersion;					\/\/广场版本$/;"	m	struct:Packet_Logon_RegisterAccounts
dwRecvTickCount	include/GlobleData.h	/^	DWORD								dwRecvTickCount;					\/\/接收时间$/;"	m	struct:CMD_KN_DetectSocket
dwSendTickCount	include/GlobleData.h	/^	DWORD								dwSendTickCount;					\/\/发送时间$/;"	m	struct:CMD_KN_DetectSocket
dwUserID	include/GlobleData.h	/^	DWORD								dwUserID;						\/\/用户 I D$/;"	m	struct:Packet_Logon_LogonByUserID
dwUserID	include/GlobleData.h	/^	DWORD							dwUserID;							\/\/用户 I D$/;"	m	struct:DBR_LogonByUserID
empty	include/tinystr.h	/^	bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString
encoding	include/tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration
endMemState	src/xmltest.cpp	/^	_CrtMemState endMemState;$/;"	v
entity	include/tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase
entity	src/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
error	include/tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument
errorDesc	include/tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument
errorId	include/tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument
errorLocation	include/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument
errorString	include/tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase
errorString	src/tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
find	include/tinystr.h	/^	size_type find (char lookup) const$/;"	f	class:TiXmlString
find	include/tinystr.h	/^	size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString
finish	include/tinystr.h	/^	char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString
firstChild	include/tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode
gFail	src/xmltest.cpp	/^static int gFail = 0;$/;"	v	file:
gPass	src/xmltest.cpp	/^static int gPass = 0;$/;"	v	file:
indent	include/tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter
init	include/tinystr.h	/^	void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString
init	include/tinystr.h	/^	void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString
instance	include/GlobalParamManager.h	/^    static CGlobalParamManager instance;$/;"	m	class:CGlobalParamManager
instance	src/GlobalParamManager.cpp	/^CGlobalParamManager CGlobalParamManager::instance;$/;"	m	class:CGlobalParamManager	file:
lErrorCode	include/GlobleData.h	/^	long								lErrorCode;						\/\/错误代码$/;"	m	struct:Packet_Result_Logon
lastChild	include/tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode
length	include/tinystr.h	/^	size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString
lineBreak	include/tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter
location	include/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase
m_Active	include/SocketItemManager.h	/^    std::vector<CSocketItem *>      m_Active;$/;"	m	class:CSocketItemManager
m_ActiveClient	include/ClientManager.h	/^    std::vector<CClient *>      m_ActiveClient;$/;"	m	class:CClientManager
m_Client	include/SocketItem.h	/^    CClient                  m_Client;$/;"	m	class:CSocketItem
m_Cond	include/HandleMessageThread.h	/^    pthread_cond_t                              m_Cond;$/;"	m	class:CHandleMessageThread
m_Cond	include/Locker.h	/^    pthread_cond_t  m_Cond;$/;"	m	class:CCond
m_Cond	include/RequestThread.h	/^    pthread_cond_t                    m_Cond;$/;"	m	class:CRequestThread
m_DBRequestQueue	include/DataBaseThread.h	/^    std::list<tagDBRequest *>         m_DBRequestQueue;$/;"	m	class:CDataBaseThread
m_DBRequestQueue	include/HandleMessageThread.h	/^    std::queue<tagHandleMessageRequest>         m_DBRequestQueue;$/;"	m	class:CHandleMessageThread
m_DBRequestQueueSize	include/GlobalParamManager.h	/^    int                 m_DBRequestQueueSize;$/;"	m	class:CGlobalParamManager
m_Free	include/SocketItemManager.h	/^    std::vector<CSocketItem *>      m_Free;$/;"	m	class:CSocketItemManager
m_FreeClient	include/ClientManager.h	/^    std::vector<CClient *>      m_FreeClient;$/;"	m	class:CClientManager
m_MaxPeople	include/GlobalParamManager.h	/^    int                 m_MaxPeople;$/;"	m	class:CGlobalParamManager
m_MaxRequests	include/DataBaseThread.h	/^    unsigned int                      m_MaxRequests;$/;"	m	class:CDataBaseThread
m_MaxRequests	include/SendThread.h	/^    unsigned int                      m_MaxRequests;$/;"	m	class:CSendThread
m_Mutex	include/HandleMessageThread.h	/^    pthread_mutex_t                             m_Mutex;$/;"	m	class:CHandleMessageThread
m_Mutex	include/Locker.h	/^    pthread_mutex_t m_Mutex;$/;"	m	class:CCond
m_Mutex	include/Locker.h	/^    pthread_mutex_t m_Mutex;$/;"	m	class:CLocker
m_Mutex	include/RequestThread.h	/^    pthread_mutex_t                   m_Mutex;$/;"	m	class:CRequestThread
m_QueueLocker	include/DataBaseThread.h	/^    CLocker                           m_QueueLocker;$/;"	m	class:CDataBaseThread
m_QueueLocker	include/SendThread.h	/^    CLocker                           m_QueueLocker;$/;"	m	class:CSendThread
m_QueueState	include/DataBaseThread.h	/^    CSem                              m_QueueState;$/;"	m	class:CDataBaseThread
m_QueueState	include/SendThread.h	/^    CSem                              m_QueueState;$/;"	m	class:CSendThread
m_RequestQueue	include/RequestThread.h	/^    std::queue<tagRequest>            m_RequestQueue;$/;"	m	class:CRequestThread
m_Sem	include/Locker.h	/^    sem_t m_Sem;$/;"	m	class:CSem
m_SendRequestQueue	include/SendThread.h	/^    std::list<tagSendRequest *>       m_SendRequestQueue;$/;"	m	class:CSendThread
m_SendRequestQueueSize	include/GlobalParamManager.h	/^    int                 m_SendRequestQueueSize;$/;"	m	class:CGlobalParamManager
m_Socket	include/SocketItem.h	/^    int                     m_Socket;$/;"	m	class:CSocketItem
m_SocketAddr	include/SocketItem.h	/^    struct sockaddr         m_SocketAddr;$/;"	m	class:CSocketItem	typeref:struct:CSocketItem::sockaddr
m_Storage	include/SocketItemManager.h	/^    std::vector<CSocketItem *>      m_Storage;$/;"	m	class:CSocketItemManager
m_StorageClient	include/ClientManager.h	/^    std::vector<CClient *>      m_StorageClient;$/;"	m	class:CClientManager
m_ThreadID	include/ServiceThread.h	/^    pthread_t                 m_ThreadID;$/;"	m	class:CServiceThread
m_WorkThread	include/NetworkEngine.h	/^    CWorkThread                      m_WorkThread;$/;"	m	class:CNetworkEngine
m_bOnLine	include/Client.h	/^    bool                     m_bOnLine;$/;"	m	class:CClient
m_bRun	include/ServiceThread.h	/^    volatile  bool            m_bRun;$/;"	m	class:CServiceThread
m_cbRecvBuf	include/SocketItem.h	/^    BYTE                     m_cbRecvBuf[SOCKET_BUFFER * 5];$/;"	m	class:CSocketItem
m_dwRecvPacketCount	include/SocketItem.h	/^    DWORD                    m_dwRecvPacketCount;$/;"	m	class:CSocketItem
m_fdEpoll	include/NetworkEngine.h	/^    int                              m_fdEpoll;$/;"	m	class:CNetworkEngine
m_fdEpoll	include/WorkThread.h	/^    int                     m_fdEpoll;$/;"	m	class:CWorkThread
m_pDataBaseResultSink	include/DataEngine.h	/^    IDataBaseResultSink              *m_pDataBaseResultSink;$/;"	m	class:CDataEngine
m_pDataBaseThread	include/DataEngine.h	/^    CDataBaseThread                  *m_pDataBaseThread;$/;"	m	class:CDataEngine
m_pDataEngine	include/ChatRoom.h	/^    CDataEngine        *m_pDataEngine;$/;"	m	class:CChatRoom
m_pDataEngineSink	include/DataBaseThread.h	/^    IDataEngineSink                   *m_pDataEngineSink;$/;"	m	class:CDataBaseThread
m_pDataEngineSink	include/RequestThread.h	/^    IDataEngineSink                   *m_pDataEngineSink;$/;"	m	class:CRequestThread
m_pDataHandleSink	include/DataEngine.h	/^    IDataHandleSink                  *m_pDataHandleSink;$/;"	m	class:CDataEngine
m_pEpollEvents	include/WorkThread.h	/^    struct epoll_event      *m_pEpollEvents;$/;"	m	class:CWorkThread	typeref:struct:CWorkThread::epoll_event
m_pHandleMessage	include/ChatRoom.h	/^    CHandleMessage     *m_pHandleMessage;$/;"	m	class:CChatRoom
m_pHandleMessageSink	include/ClientManager.h	/^    IServerSocketItemSink       *m_pHandleMessageSink;$/;"	m	class:CClientManager
m_pHandleMessageSink	include/SocketItemManager.h	/^    IServerSocketItemSink       *m_pHandleMessageSink;$/;"	m	class:CSocketItemManager
m_pIServerSocketItemSink	include/SocketItem.h	/^    IServerSocketItemSink   *m_pIServerSocketItemSink;$/;"	m	class:CSocketItem
m_pListenSocketItem	include/NetworkEngine.h	/^    CSocketItem                      *m_pListenSocketItem;$/;"	m	class:CNetworkEngine
m_pListenSocketItem	include/WorkThread.h	/^    CSocketItem             *m_pListenSocketItem;$/;"	m	class:CWorkThread
m_pLoggingAcceptor	include/WorkThread.h	/^    CLoggingAcceptor        *m_pLoggingAcceptor;$/;"	m	class:CWorkThread
m_pMysqlHandle	include/ChatRoom.h	/^    CMySqlDataHandle   *m_pMysqlHandle;$/;"	m	class:CChatRoom
m_pNetwork	include/ChatRoom.h	/^    CNetworkEngine     *m_pNetwork;$/;"	m	class:CChatRoom
m_pNetworkSink	include/HandleMessage.h	/^    INetworkSink                         *m_pNetworkSink;$/;"	m	class:CHandleMessage
m_pPostDataDataSink	include/HandleMessage.h	/^    IPostDataBaseRequestSink             *m_pPostDataDataSink;$/;"	m	class:CHandleMessage
m_pSendThread	include/NetworkEngine.h	/^    CSendThread                      *m_pSendThread;$/;"	m	class:CNetworkEngine
m_pXMLDataHandle	include/ChatRoom.h	/^    CXMLDataHandle     *m_pXMLDataHandle;$/;"	m	class:CChatRoom
m_strFileName	include/XMLDataHandle.h	/^    const char             *m_strFileName;$/;"	m	class:CXMLDataHandle
m_strListenPort	include/NetworkEngine.h	/^    const char                       *m_strListenPort;$/;"	m	class:CNetworkEngine
m_strServerPort	include/GlobalParamManager.h	/^    std::string         m_strServerPort;$/;"	m	class:CGlobalParamManager
m_strUserName	include/Client.h	/^    std::string              m_strUserName;$/;"	m	class:CClient
m_strXMLFilePath	include/GlobalParamManager.h	/^    std::string         m_strXMLFilePath;$/;"	m	class:CGlobalParamManager
m_wCurrentCount	include/ClientManager.h	/^    WORD                          m_wCurrentCount;$/;"	m	class:CClientManager
m_wCurrentCount	include/SocketItemManager.h	/^    WORD                          m_wCurrentCount;$/;"	m	class:CSocketItemManager
m_wIndex	include/SocketItem.h	/^    WORD                     m_wIndex;$/;"	m	class:CSocketItem
m_wRecvSize	include/SocketItem.h	/^    WORD                     m_wRecvSize;$/;"	m	class:CSocketItem
m_wStorageCount	include/ClientManager.h	/^    WORD                          m_wStorageCount;$/;"	m	class:CClientManager
m_wStorageCount	include/SocketItemManager.h	/^    WORD                          m_wStorageCount;$/;"	m	class:CSocketItemManager
main	main.cpp	/^int main()$/;"	f
main	src/xmltest.cpp	/^int main()$/;"	f
name	include/tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute
next	include/tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute
next	include/tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode
node	include/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle
npos	include/tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString
npos	src/tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	file:
nullrep_	include/tinystr.h	/^	static Rep nullrep_;$/;"	m	class:TiXmlString
nullrep_	src/tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	file:
obj	include/Singleton.h	/^    static T            obj;$/;"	m	class:CSingleton
obj	include/Singleton.h	/^T CSingleton<T>::obj;$/;"	m	class:CSingleton
onSendSink	src/HandleMessage.cpp	/^int CHandleMessage::onSendSink(int Socket)$/;"	f	class:CHandleMessage
operator !=	include/tinystr.h	/^inline bool operator != (const TiXmlString & a, const TiXmlString & b) { return !(a == b); }$/;"	f
operator !=	include/tinystr.h	/^inline bool operator != (const TiXmlString & a, const char* b) { return !(a == b); }$/;"	f
operator !=	include/tinystr.h	/^inline bool operator != (const char* a, const TiXmlString & b) { return !(b == a); }$/;"	f
operator +	src/tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b)$/;"	f
operator +	src/tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const char* b)$/;"	f
operator +	src/tinystr.cpp	/^TiXmlString operator + (const char* a, const TiXmlString & b)$/;"	f
operator +=	include/tinystr.h	/^	TiXmlString& operator += (char single)$/;"	f	class:TiXmlString
operator +=	include/tinystr.h	/^	TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString
operator +=	include/tinystr.h	/^	TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString
operator <	include/tinystr.h	/^inline bool operator < (const TiXmlString & a, const TiXmlString & b)$/;"	f
operator <	include/tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute
operator <<	include/tinystr.h	/^	TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream
operator <<	include/tinystr.h	/^	TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream
operator <<	src/tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f
operator <<	src/tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f
operator <=	include/tinystr.h	/^inline bool operator <= (const TiXmlString & a, const TiXmlString & b) { return !(b < a); }$/;"	f
operator =	include/Singleton.h	/^    CSingleton&         operator=(const CSingleton&)    {}$/;"	f	class:CSingleton
operator =	include/tinystr.h	/^	TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString
operator =	include/tinystr.h	/^	TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString
operator =	include/tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle
operator =	include/tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText
operator =	include/tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *this; }$/;"	f	class:TiXmlUnknown
operator =	src/tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment
operator =	src/tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
operator =	src/tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument
operator =	src/tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement
operator ==	include/tinystr.h	/^inline bool operator == (const TiXmlString & a, const TiXmlString & b)$/;"	f
operator ==	include/tinystr.h	/^inline bool operator == (const TiXmlString & a, const char* b) { return strcmp(a.c_str(), b) == 0; }$/;"	f
operator ==	include/tinystr.h	/^inline bool operator == (const char* a, const TiXmlString & b) { return b == a; }$/;"	f
operator ==	include/tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute
operator >	include/tinystr.h	/^inline bool operator >  (const TiXmlString & a, const TiXmlString & b) { return b < a; }$/;"	f
operator >	include/tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute
operator >=	include/tinystr.h	/^inline bool operator >= (const TiXmlString & a, const TiXmlString & b) { return !(a < b); }$/;"	f
operator >>	src/tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f
operator []	include/tinystr.h	/^	char& operator [] (size_type index) const$/;"	f	class:TiXmlString
pCondt	include/GlobleData.h	/^    pthread_cond_t                  *pCondt;$/;"	m	struct:tagThreadParameter
pData	include/GlobleData.h	/^    BYTE                            *pData;$/;"	m	struct:tagDBRequest
pData	include/GlobleData.h	/^    BYTE                            *pData;$/;"	m	struct:tagHandleMessageRequest
pData	include/GlobleData.h	/^    BYTE                            *pData;$/;"	m	struct:tagRequest
pData	include/GlobleData.h	/^    BYTE                            *pData;$/;"	m	struct:tagSendRequest
pServerThread	include/GlobleData.h	/^    CServiceThread                  *pServerThread;                     \/\/线程指针$/;"	m	struct:tagThreadParameter
pSocketItem	include/GlobleData.h	/^    CSocketItem                     *pSocketItem;$/;"	m	struct:tagHandleMessageRequest
pSocketItem	include/GlobleData.h	/^    CSocketItem                     *pSocketItem;$/;"	m	struct:tagRequest
parent	include/tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode
prev	include/tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute
prev	include/tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode
quit	include/tinystr.h	/^	void quit()$/;"	f	class:TiXmlString
rep_	include/tinystr.h	/^	Rep * rep_;$/;"	m	class:TiXmlString
reserve	src/tinystr.cpp	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString
row	include/tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor
sentinel	include/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet
set_size	include/tinystr.h	/^	void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString
sig_term	main.cpp	/^void sig_term(int signo)$/;"	f
simpleTextPrint	include/tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter
size	include/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep
size	include/tinystr.h	/^	size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString
size_type	include/tinystr.h	/^  	typedef size_t size_type;$/;"	t	class:TiXmlString
stamp	src/tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:
standalone	include/tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration
start	include/tinystr.h	/^	char* start() const { return rep_->str; }$/;"	f	class:TiXmlString
str	include/tinystr.h	/^		char str[1];$/;"	m	struct:TiXmlString::Rep
str	include/tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity
strLength	include/tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity
swap	include/tinystr.h	/^	void swap (TiXmlString& other)$/;"	f	class:TiXmlString
szAccount	include/GlobleData.h	/^    char                              szAccount[ACCOUNT_LEN];            \/\/注销者$/;"	m	struct:Packet_Layout
szAccounts	include/GlobleData.h	/^	char								szAccounts[ACCOUNT_LEN];			\/\/登录帐号$/;"	m	struct:Packet_Logon_LogonByAccounts
szAccounts	include/GlobleData.h	/^	char								szAccounts[ACCOUNT_LEN];			\/\/登录帐号$/;"	m	struct:Packet_Logon_RegisterAccounts
szAccounts	include/GlobleData.h	/^	char							szAccounts[ACCOUNT_LEN];				\/\/注册帐号$/;"	m	struct:DBR_GP_Result_Register_Success
szAccounts	include/GlobleData.h	/^	char							szAccounts[ACCOUNT_LEN];				\/\/登录帐号$/;"	m	struct:DBR_GP_Result_LogonByAccounts
szAccounts	include/GlobleData.h	/^	char							szAccounts[ACCOUNT_LEN];				\/\/登录帐号$/;"	m	struct:DBR_LogonByAccounts
szAccounts	include/GlobleData.h	/^	char							szAccounts[ACCOUNT_LEN];				\/\/登录帐号$/;"	m	struct:DBR_RegisterAccounts
szAccounts	include/GlobleData.h	/^    char							szAccounts[ACCOUNT_LEN];				\/\/登录帐号$/;"	m	struct:tagUserData
szErrorDescribe	include/GlobleData.h	/^	char								szErrorDescribe[128];			\/\/错误消息$/;"	m	struct:Packet_Result_Logon
szMessage	include/GlobleData.h	/^	char                                szMessage[MESSAGE_BUFFER];  \/\/聊天消息$/;"	m	struct:Packet_Chat_ChatByAll
szMessage	include/GlobleData.h	/^	char                                szMessage[MESSAGE_BUFFER];  \/\/聊天消息$/;"	m	struct:Packet_Chat_ChatBySingle
szPassWord	include/GlobleData.h	/^	char								szPassWord[PASS_LEN];			\/\/登录密码$/;"	m	struct:Packet_Logon_LogonByAccounts
szPassWord	include/GlobleData.h	/^	char								szPassWord[PASS_LEN];			\/\/登录密码$/;"	m	struct:Packet_Logon_LogonByUserID
szPassWord	include/GlobleData.h	/^	char								szPassWord[PASS_LEN];			\/\/登录密码$/;"	m	struct:Packet_Logon_RegisterAccounts
szPassWord	include/GlobleData.h	/^	char							szPassWord[PASS_LEN];				\/\/注册密码$/;"	m	struct:DBR_GP_Result_Register_Success
szPassWord	include/GlobleData.h	/^	char							szPassWord[PASS_LEN];				\/\/登录密码$/;"	m	struct:DBR_GP_Result_LogonByAccounts
szPassWord	include/GlobleData.h	/^	char							szPassWord[PASS_LEN];				\/\/登录密码$/;"	m	struct:DBR_LogonByAccounts
szPassWord	include/GlobleData.h	/^	char							szPassWord[PASS_LEN];				\/\/登录密码$/;"	m	struct:DBR_LogonByUserID
szPassWord	include/GlobleData.h	/^	char							szPassWord[PASS_LEN];				\/\/登录密码$/;"	m	struct:DBR_RegisterAccounts
szPassWord	include/GlobleData.h	/^	char							szPassWord[PASS_LEN];				\/\/登录密码$/;"	m	struct:tagUserData
szRecver	include/GlobleData.h	/^	char								szRecver[ACCOUNT_LEN];			\/\/接收者$/;"	m	struct:Packet_Chat_ChatBySingle
szSender	include/GlobleData.h	/^	char								szSender[ACCOUNT_LEN];			\/\/发送者$/;"	m	struct:Packet_Chat_ChatByAll
szSender	include/GlobleData.h	/^	char								szSender[ACCOUNT_LEN];			\/\/发送者$/;"	m	struct:Packet_Chat_ChatBySingle
tabsize	include/tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument
tabsize	src/tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:
tagDBRequest	include/GlobleData.h	/^struct tagDBRequest$/;"	s
tagDataHead	include/GlobleData.h	/^struct tagDataHead$/;"	s
tagHandleMessageRequest	include/GlobleData.h	/^struct tagHandleMessageRequest$/;"	s
tagRequest	include/GlobleData.h	/^struct tagRequest$/;"	s
tagSendRequest	include/GlobleData.h	/^struct tagSendRequest$/;"	s
tagThreadParameter	include/GlobleData.h	/^struct tagThreadParameter$/;"	s
tagUserData	include/GlobleData.h	/^struct tagUserData$/;"	s
type	include/tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode
useMicrosoftBOM	include/tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument
userData	include/tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase
utf8ByteTable	include/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase
utf8ByteTable	src/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
value	include/tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode
value	include/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute
version	include/tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration
wDataSize	include/GlobleData.h	/^	WORD							wDataSize;							\/\/数据大小$/;"	m	struct:tagDataHead
wDataSize	include/GlobleData.h	/^    WORD                            wDataSize;$/;"	m	struct:tagDBRequest
wDataSize	include/GlobleData.h	/^    WORD                            wDataSize;$/;"	m	struct:tagHandleMessageRequest
wDataSize	include/GlobleData.h	/^    WORD                            wDataSize;$/;"	m	struct:tagRequest
wDataSize	include/GlobleData.h	/^    WORD                            wDataSize;$/;"	m	struct:tagSendRequest
wIdentifier	include/GlobleData.h	/^	WORD							wIdentifier;						\/\/类型标识$/;"	m	struct:tagDataHead
wMainCmdID	include/GlobleData.h	/^	WORD								wMainCmdID;							\/\/主命令码$/;"	m	struct:CMD_Command
wMainCmdID	include/GlobleData.h	/^    WORD                            wMainCmdID;$/;"	m	struct:tagSendRequest
wPacketSize	include/GlobleData.h	/^	WORD								wPacketSize;						\/\/数据大小$/;"	m	struct:CMD_Info
wRequestID	include/GlobleData.h	/^    WORD                            wRequestID;$/;"	m	struct:tagDBRequest
wRequestID	include/GlobleData.h	/^    WORD                            wRequestID;$/;"	m	struct:tagHandleMessageRequest
wRequestID	include/GlobleData.h	/^    WORD                            wRequestID;$/;"	m	struct:tagRequest
wResultCode	include/GlobleData.h	/^    WORD                                 wResultCode;               \/\/结果码$/;"	m	struct:Packet_Result_Chat
wSubCmdID	include/GlobleData.h	/^	WORD								wSubCmdID;							\/\/子命令码$/;"	m	struct:CMD_Command
wSubCmdID	include/GlobleData.h	/^    WORD                            wSubCmdID;$/;"	m	struct:tagSendRequest
~CChatRoom	src/ChatRoom.cpp	/^CChatRoom::~CChatRoom()$/;"	f	class:CChatRoom
~CClient	src/Client.cpp	/^CClient::~CClient()$/;"	f	class:CClient
~CClientManager	src/ClientManager.cpp	/^CClientManager::~CClientManager()$/;"	f	class:CClientManager
~CCond	src/Locker.cpp	/^CCond::~CCond()$/;"	f	class:CCond
~CDataBaseThread	src/DataBaseThread.cpp	/^CDataBaseThread::~CDataBaseThread()$/;"	f	class:CDataBaseThread
~CDataEngine	src/DataEngine.cpp	/^CDataEngine::~CDataEngine()$/;"	f	class:CDataEngine
~CGlobalParamManager	src/GlobalParamManager.cpp	/^CGlobalParamManager::~CGlobalParamManager()$/;"	f	class:CGlobalParamManager
~CHandleMessage	src/HandleMessage.cpp	/^CHandleMessage::~CHandleMessage()$/;"	f	class:CHandleMessage
~CHandleMessageThread	src/HandleMessageThread.cpp	/^CHandleMessageThread::~CHandleMessageThread()$/;"	f	class:CHandleMessageThread
~CLocker	src/Locker.cpp	/^CLocker::~CLocker()$/;"	f	class:CLocker
~CLog	src/Log.cpp	/^CLog::~CLog()$/;"	f	class:CLog
~CMySqlDataHandle	src/MySqlDataHandle.cpp	/^CMySqlDataHandle::~CMySqlDataHandle()$/;"	f	class:CMySqlDataHandle
~CNetworkEngine	src/NetworkEngine.cpp	/^CNetworkEngine::~CNetworkEngine()$/;"	f	class:CNetworkEngine
~CRequestThread	src/RequestThread.cpp	/^CRequestThread::~CRequestThread()$/;"	f	class:CRequestThread
~CSem	src/Locker.cpp	/^CSem::~CSem()$/;"	f	class:CSem
~CSendThread	src/SendThread.cpp	/^CSendThread::~CSendThread()$/;"	f	class:CSendThread
~CServiceThread	src/ServiceThread.cpp	/^CServiceThread::~CServiceThread()$/;"	f	class:CServiceThread
~CSingleton	include/Singleton.h	/^    virtual             ~CSingleton()   {}$/;"	f	class:CSingleton
~CSocketItem	src/SocketItem.cpp	/^CSocketItem::~CSocketItem()$/;"	f	class:CSocketItem
~CSocketItemManager	src/SocketItemManager.cpp	/^CSocketItemManager::~CSocketItemManager()$/;"	f	class:CSocketItemManager
~CWorkThread	src/WorkThread.cpp	/^CWorkThread::~CWorkThread()$/;"	f	class:CWorkThread
~CXMLDataHandle	src/XMLDataHandle.cpp	/^CXMLDataHandle::~CXMLDataHandle()$/;"	f	class:CXMLDataHandle
~TiXmlAttributeSet	src/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
~TiXmlBase	include/tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase
~TiXmlComment	include/tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment
~TiXmlDeclaration	include/tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration
~TiXmlDocument	include/tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument
~TiXmlElement	src/tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement
~TiXmlNode	src/tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode
~TiXmlString	include/tinystr.h	/^	~TiXmlString ()$/;"	f	class:TiXmlString
~TiXmlText	include/tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText
~TiXmlUnknown	include/tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown
~TiXmlVisitor	include/tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor
